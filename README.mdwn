# Logging Guidelines

Guidelines for logging in software development.

## Overview

As a software engineer I have often wondered how much information to log, how
much is too much, and at what level to log a given message. Therefore, I 
aim to create guidelines for a possible approach to logging. I acknowledge
that the guidelines will not always be meaningful, necessary or possible to
implement, they are designed predominantly around my experience in the
financial sector.

## Log Levels

A widely used standard of logging levels is as follows

1. debug
2. info
3. warning
4. error

Where each is a superset of those with higher numbers so any given message
should be logged only once at the highest applicable level. Here we aim to
provide a summary of the meaning of each level as understood in these
guidelines.

### Target Audience

Before you start writing logging, consider who is the target audience for each
level of logging. This will be different for a piece of software designed to
run on a private server compared to a general audience desktop application or
opensource commandline tool.

Here are some suggestions

* debug - this is for developers, this could be just yourself, a team within a company or the opensource community
* info - for a commandline tool this level could be for everyone, for a desktop application this level may not be useful at all
* warning - this could be for general users or for system administrators
* error - in an application for general use this might be most useful for support. In general errors are very important to system administrators

### Debug

By reading debug level logging, a person who can see the code should be able to
step through which lines were executed. It is not necessary to log every line
of code executed, but it should be obvious which nontrivial paths were taken
when the code forks and the value of any input or external data which affect
the path of execution.

The reader should be able to isolate messages from any given thread in order of
execution.

#### User Story

Doris is a developer in a bank. Software A is a piece of software that takes a
data from a database as input, does some calculations and puts the result in a
database. Doris must identify a bug in Software A running on a remote server.
Doris only has access to the software's logs, the source-code and the input and
output data. Doris has no shell access to the server. Doris should have enough
information to identify the bug by reading the debug log messages.

### Info

By reading info level logging, a person familiar with the software but
unfamiliar with the source-code of the software should be able to understand
everything the program does at a level of abstraction familiar to an end-user.
Information relating to time of execution of functionality as well as space
usage should also be logged at an info level as it is of interest to an
end-user.

Any change to data or input to prevent an error should also be logged as info.

#### User Story

Terence produces reports from a piece of software as part of his job. Terence
has experience developing software but did not write this particular tool and
has never seen the source-code. One day after submitting a report, Terence's
boss asks Terence why the software populated a particular part of the report
the way it did. Terence does not know the answer at first. Terence should be able to find the answer by reading the info log messages.

### Warning

Messages logged as warning are anything that should be brought to the attention
of the software's administrator.

Action may not be required.

### Error

Anything that deviates from the expected behavior of the software should be
logged as an error.

Action required to enable the software to function correctly.

## Future work for this repo

* Add appropriate licence
* write RFC style breakdown (with MUST, SHOULD etc keywords) of each log level
* wording of logging messages (should they be progressive tense? perfect tense?)
* what not to log: sensitive information

## Composing Log Messages

### Error

Error messages should be readable by a general audience as it is the highest
level of logging. Any information relating to the error that is useful for a developer should be logged at debug level beforehand.

It is recommended to log an error in the following format:

    DEBUG "An error occurred [where] technical what, technical why, possible fix"
    ERROR "general audience what - user impact"

* "An error occurred" - literally these words so a developer knows this debug entry relates to the error following
* where - where in the code (this may be handled by the logging framework being used) e.g. thread id, line of code, name of function, if using OOP it is useful to be able to identify the instance (an address in memory may suffice but often attributes that uniquely identify that class are more useful)
* technical what - an explanation of what the error in terms most useful to a developer
* technical why - an explanation of what caused the error in terms most useful to a developer
* possible fix - often the developer who writes the code that catches the error is best placed to suggest what might have gone wrong and how that can be mitigated. If known add that information. If a developer later finds this error and determines a cause, it is encouraged they add this information too
* general audience what - an explanation of what happened in very broad terms
* user impact - an explanation of what the impact of this error is on the usage of this software

If possible some ID that ties the debug information to the error would be
useful in the case of multiple loggers writing to the same output they may
become separated. Another idea would be to have 2 messages in any error record,
one displayed to end users and one available to developers. A different error
message could be logged when running the software with log level debug -
however the original error should still be logged to ensure an error is being
correctly reproduced.
