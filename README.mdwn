# Logging Guidelines

Guidelines for logging in software development.

## Overview

As a software engineer I have often wondered how much information to log, how
much is too much, and at what level to log a given message. Therefore, I 
aim to create guidelines for a possible approach to logging. I acknowledge
that the guidelines will not always be meaningful, necessary or possible to
implement, they are designed predominantly around my experience in the
financial sector.

## Log Levels

A widely used standard of logging levels is as follows

1. debug
2. info
3. warning
4. error

Where each is a superset of those with higher numbers so any given message
should be logged only once at the highest applicable level. Here we aim to
provide a summary of the meaning of each level as understood in these
guidelines.

### Debug

By reading debug level logging, a person who can see the code should be able to
step through which lines were executed. It is not necessary to log every line
of code executed, but it should be obvious which nontrivial paths were taken
when the code forks and the value of any input or external data which affect
the path of execution.

The reader should be able to isolate messages from any given thread in order of
execution.

#### User Story

Doris is a developer in a bank. Software A is a piece of software that takes a
data from a database as input, does some calculations and puts the result in a
database. Doris must identify a bug in Software A running on a remote server.
Doris only has access to the software's logs, the source-code and the input and
output data. Doris has no shell access to the server. Doris should have enough
information to identify the bug by reading the debug log messages.

### Info

By reading info level logging, a person familiar with the software but
unfamiliar with the source-code of the software should be able to understand
everything the program does at a level of abstraction familiar to an end-user.
Information relating to time of execution of functionality as well as space
usage should also be logged at an info level as it is of interest to an
end-user.

Any change to data or input to prevent an error should also be logged as info.

#### User Story

Terence produces reports from a piece of software as part of his job. Terence
has experience developing software but did not write this particular tool and
has never seen the source-code. One day after submitting a report, Terence's
boss asks Terence why the software populated a particular part of the report
the way it did. Terence does not know the answer at first. Terence should be able to find the answer by reading the info log messages.

### Warning

Messages logged as warning are anything that should be brought to the attention
of the software's administrator.

Action may not be required.

### Error

Anything that deviates from the expected behavior of the software should be
logged as an error.

Action required to enable the software to function correctly.

## Future work for this repo

* Add appropriate licence
* write RFC style breakdown (with MUST, SHOULD etc keywords) of each log level
